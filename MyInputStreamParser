package cn.com.kael.utils;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

public class MyInputStreamParser {
	private static final String ENCODING = "UTF-8";
	private static final String NEW_LINE_CHAR = System.getProperty("line.separator");
	
	/**
	 * 将request中的数据进行进行解析，并将数据返回
	 * 使用条件：POST数据提交时
	 * 
	 * @param request
	 * @return 在request中的数据
	 * @throws IOException 
	 * @throws UnsupportedEncodingException 
	 */
	public static Map<String, Object> parseRequest(HttpServletRequest request) throws UnsupportedEncodingException, IOException {
		// 0, 只能针对POST提交方式
		if (!request.getMethod().equals("POST")) {
			return null;
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		// 1, 获取encType类型
		String contentType = request.getContentType();
		if (null == contentType) {
			return null;
		}
		
		// 2, 解析普通表单数据
		if ("application/x-www-form-urlencoded".equals(contentType)
				|| contentType.contains("application/x-www-form-urlencoded")) {
			BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream(), ENCODING));
			String content = null;
			while ((content = reader.readLine()) != null) {
				String[] paramArr = content.split("&");
				for (String param : paramArr) {
					String[] arr = param.split("=");
					map.put(arr[0], arr[1]);
				}
			}
		} else {	// 3, 解析文件上传表单数据
			// a, 将流中的数据转换成字节数组
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			InputStream input = request.getInputStream();
			byte[] buf = new byte[1024];
			int length = -1;
			while ((length = input.read(buf)) != -1) {
				baos.write(buf, 0, length);
			}
			
			// b, 将字节数组转换成字符串
			String params = baos.toString("ISO8859-1");
			String boundary = contentType.substring(contentType.lastIndexOf("-") + 1);
			
			// c, 将数据分批解析
			int paramNum = params.split("Content-Disposition").length;		// 流中一共存在上传参数的总数
			int cursor = 0;		// 指针
			int contentDispositionLength = "Content-Disposition".length();	// for循坏外部定义该字符串的长度，避免重复定义
			for (int i = 0; i < paramNum; i ++) {
				cursor = getStringLastIndex(params, "Content-Disposition", cursor);
				if (cursor - contentDispositionLength <= -1) continue;
				String line = params.substring(cursor, params.indexOf(NEW_LINE_CHAR, cursor));
				if (line.contains("filename=")) {
					cursor = getStringLastIndex(params, "name=\"", cursor);
					
					// 1. 先读取文件数据的name
					String key = params.substring(cursor, params.indexOf("\"", cursor));
					
					// 2. 在读取文件数据的filename信息
					cursor = getStringLastIndex(params, "filename=\"", cursor);
					map.put("filename", new String(params.substring(cursor, params.indexOf("\"", cursor)).trim().getBytes("ISO8859-1"), ENCODING));
					
					// 3, 读取文件类型
					cursor = getStringLastIndex(params, "Content-Type:", cursor);
					map.put("filetype", params.substring(cursor, params.indexOf(NEW_LINE_CHAR, cursor)).trim());
					
					// 4, 读取文件数据
					cursor = getStringLastIndex(params, NEW_LINE_CHAR, cursor);
					cursor = getStringLastIndex(params, NEW_LINE_CHAR, cursor);
					int endPosition = params.indexOf(boundary, cursor);			// 文件数据的末尾
					while (true) {
						if (params.charAt(endPosition) == '\n') {
							break;
						}
						endPosition --;
					}
					ByteArrayOutputStream baos2 = new ByteArrayOutputStream(1024);
					// 如果是Windows系统，空行是\r\n，两个字符；Linux系统下，空行是\n，一个字符
					// 所以在Windown系统下，当你索引到\n的时候，还需要将坐标额外向前移动1位置，因为前面一个字符是\r。
					baos2.write(params.substring(cursor, endPosition + 1 - NEW_LINE_CHAR.length()).getBytes("ISO8859-1"));
					map.put(key, baos2);
					baos2.close();
				} else {
					cursor = getStringLastIndex(params, "name=\"", cursor);
					String key = params.substring(cursor, params.indexOf("\"", cursor));
					cursor = getStringLastIndex(params, NEW_LINE_CHAR, cursor);
					cursor = getStringLastIndex(params, NEW_LINE_CHAR, cursor);
					String value = params.substring(cursor, params.indexOf(NEW_LINE_CHAR, cursor)).trim();
					map.put(key, value);
				}
			}
		}
		return map;
	}
	
	/**
	 * 查找在src字符串中，紧接着指定parttern字符串的第一个字符的位置
	 * @param src
	 * @param pattern
	 * @param begin
	 * @return
	 */
	public static int getStringLastIndex(String src, String pattern, int begin) {
		return src.indexOf(pattern, begin) + pattern.length();
	}

}
